[2021-12-15 07:10:11] [[32minfo[39m] Server is running on port 8080
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 07:10:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 07:10:13] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 07:10:14] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 07:10:15] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:16] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 07:10:17] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `orderStatus` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 07:10:18] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:10:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 07:10:19] [[32minfo[39m] Dropped and Resync database
[2021-12-15 07:12:22] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 07:12:22] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:12:22] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:12:22] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:12:22] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:12:22] [[32minfo[39m] Request status: [object Object] data 
[2021-12-15 07:12:43] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:12:43] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:12:43] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:12:43] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:12:43] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:12:43] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:12:43] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:12:43] [[32minfo[39m] Request status: [object Object] data 
[2021-12-15 07:12:49] [[32minfo[39m] Executing (default): SELECT `id`, `catName`, `catIcon` FROM `foodCategories` AS `foodCategories`;
[2021-12-15 07:12:49] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories]
[2021-12-15 07:12:52] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:12:52] [[32minfo[39m] Request status: [object Object] data 
[2021-12-15 07:12:52] [[32minfo[39m] Request status: [object Object]
[2021-12-15 07:12:58] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:12:58] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:12:58] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:12:58] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:12:58] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:favoriteFoodCategories]
[2021-12-15 07:13:03] [[32minfo[39m] Executing (default): SELECT `id`, `catName`, `catIcon` FROM `foodCategories` AS `foodCategories`;
[2021-12-15 07:13:03] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories]
[2021-12-15 07:13:03] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:13:03] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:13:03] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:13:03] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:13:03] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:favoriteFoodCategories]
[2021-12-15 07:13:05] [[32minfo[39m] Executing (default): SELECT `id`, `foodName`, `foodDescription`, `foodCalories`, `foodImage`, `createdAt`, `updatedAt`, `foodCategoryId` FROM `foods` AS `foods` WHERE `foods`.`foodCategoryId` = '1';
[2021-12-15 07:13:05] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foods],[object SequelizeInstance:foods],[object SequelizeInstance:foods],[object SequelizeInstance:foods],[object SequelizeInstance:foods]
[2021-12-15 07:13:07] [[32minfo[39m] Executing (default): SELECT `foods`.`id`, `foods`.`foodName`, `foods`.`foodDescription`, `foods`.`foodCalories`, `foods`.`foodImage`, `foods`.`createdAt`, `foods`.`updatedAt`, `foods`.`foodCategoryId`, `foodMaterials`.`id` AS `foodMaterials.id`, `foodMaterials`.`foodMaterialName` AS `foodMaterials.foodMaterialName`, `foodMaterials`.`quantityDescription` AS `foodMaterials.quantityDescription`, `foodMaterials`.`productId` AS `foodMaterials.productId`, `foodCookSteps`.`id` AS `foodCookSteps.id`, `foodCookSteps`.`stepNumber` AS `foodCookSteps.stepNumber`, `foodCookSteps`.`stepDescription` AS `foodCookSteps.stepDescription` FROM `foods` AS `foods` LEFT OUTER JOIN `foodMaterials` AS `foodMaterials` ON `foods`.`id` = `foodMaterials`.`foodId` LEFT OUTER JOIN `foodCookSteps` AS `foodCookSteps` ON `foods`.`id` = `foodCookSteps`.`foodId` WHERE `foods`.`id` = '1';
[2021-12-15 07:13:07] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foods]
[2021-12-15 07:17:13] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 07:17:13] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:17:13] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:17:13] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:17:13] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:17:13] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:favoriteFoodCategories]
[2021-12-15 07:17:15] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:17:15] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:17:15] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:17:15] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:17:15] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:17:15] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:17:15] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:17:15] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:favoriteFoodCategories]
[2021-12-15 07:17:19] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = 'undefined';
[2021-12-15 07:17:19] [[31merror[39m] Request status: [object Object]  error User not found
[2021-12-15 07:17:26] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '1' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 07:17:26] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '1' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 07:17:28] [[32minfo[39m] Executing (default): SELECT `id`, `catName`, `catIcon` FROM `foodCategories` AS `foodCategories`;
[2021-12-15 07:17:28] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories]
[2021-12-15 07:17:29] [[32minfo[39m] Executing (default): SELECT `id`, `catName` FROM `productCategories` AS `productCategories`;
[2021-12-15 07:17:29] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:productCategories],[object SequelizeInstance:productCategories],[object SequelizeInstance:productCategories],[object SequelizeInstance:productCategories],[object SequelizeInstance:productCategories]
[2021-12-15 07:17:31] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 07:17:31] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 07:17:31] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 07:17:31] [[32minfo[39m] Executing (default): SELECT `createdAt`, `updatedAt`, `userId`, `foodCategoryId` FROM `favoriteFoodCategories` AS `favoriteFoodCategories` WHERE `favoriteFoodCategories`.`userId` = '1';
[2021-12-15 07:17:31] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:favoriteFoodCategories]
[2021-12-15 07:34:09] [[32minfo[39m] Server is running on port 8080
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 07:34:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 07:34:10] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `orderStatus` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 07:34:11] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 07:34:12] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 07:34:12] [[32minfo[39m] Dropped and Resync database
[2021-12-15 09:03:36] [[32minfo[39m] Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `roles` AS `roles` WHERE (`roles`.`name` = 'user');
[2021-12-15 09:03:36] [[32minfo[39m] User baotg is registered
[2021-12-15 09:03:39] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'baotg';
[2021-12-15 09:03:53] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:04:00] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:04:00] [[31merror[39m] Request status: [object Object]  error TypeError: Cannot read properties of undefined (reading 'reverse')
[2021-12-15 09:04:14] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:04:14] [[31merror[39m] Request status: [object Object]  error TypeError: Cannot read properties of undefined (reading 'reverse')
[2021-12-15 09:05:06] [[32minfo[39m] Server is running on port 8080
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 09:05:07] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 09:05:08] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `orderStatus` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 09:05:09] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:05:10] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 09:05:10] [[32minfo[39m] Dropped and Resync database
[2021-12-15 09:05:15] [[32minfo[39m] Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `roles` AS `roles` WHERE (`roles`.`name` = 'user');
[2021-12-15 09:05:15] [[32minfo[39m] User baotg is registered
[2021-12-15 09:05:17] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'baotg';
[2021-12-15 09:05:27] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:05:31] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:05:31] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:orders]
[2021-12-15 09:05:42] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:05:46] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:05:46] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:orders],[object SequelizeInstance:orders]
[2021-12-15 09:06:22] [[32minfo[39m] Server is running on port 8080
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 09:06:22] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:23] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 09:06:24] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `orderStatus` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 09:06:25] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 09:06:25] [[32minfo[39m] Dropped and Resync database
[2021-12-15 09:06:28] [[32minfo[39m] Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `roles` AS `roles` WHERE (`roles`.`name` = 'user');
[2021-12-15 09:06:28] [[32minfo[39m] User baotg is registered
[2021-12-15 09:06:30] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'baotg';
[2021-12-15 09:06:42] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:06:48] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:06:48] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:orders]
[2021-12-15 09:06:54] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:06:55] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:06:56] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 09:06:58] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`orderStatus`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 09:06:58] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:orders],[object SequelizeInstance:orders],[object SequelizeInstance:orders],[object SequelizeInstance:orders]
[2021-12-15 10:31:05] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 10:31:06] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:06] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:06] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:08] [[32minfo[39m] Executing (default): SELECT `id`, `catName`, `catIcon` FROM `foodCategories` AS `foodCategories`;
[2021-12-15 10:31:08] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:08] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories],[object SequelizeInstance:foodCategories]
[2021-12-15 10:31:08] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:08] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:09] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:09] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:09] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:11] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:11] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:11] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:11] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:11] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:11] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:16] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:16] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:16] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:19] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:19] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:19] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:28] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 10:31:30] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 10:31:31] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 10:31:32] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 10:31:33] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 10:31:35] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:35] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:35] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:35] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:35] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:35] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:35] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:37] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:37] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:37] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:37] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:37] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:43] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:43] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:43] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:43] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:43] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:44] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 10:31:44] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 10:31:44] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 10:31:44] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 10:31:44] [[32minfo[39m] Executing (default): SELECT `carts`.*, `cartDetails`.`id` AS `cartDetails.id`, `cartDetails`.`quantity` AS `cartDetails.quantity`, `cartDetails`.`isBuy` AS `cartDetails.isBuy`, `cartDetails`.`isDeleted` AS `cartDetails.isDeleted`, `cartDetails`.`createdAt` AS `cartDetails.createdAt`, `cartDetails`.`updatedAt` AS `cartDetails.updatedAt`, `cartDetails`.`cartId` AS `cartDetails.cartId`, `cartDetails`.`productId` AS `cartDetails.productId`, `cartDetails->product`.`id` AS `cartDetails.product.id`, `cartDetails->product`.`proName` AS `cartDetails.product.proName`, `cartDetails->product`.`proDescription` AS `cartDetails.product.proDescription`, `cartDetails->product`.`quantityValue` AS `cartDetails.product.quantityValue`, `cartDetails->product`.`price` AS `cartDetails.product.price`, `cartDetails->product`.`brand` AS `cartDetails.product.brand`, `cartDetails->product`.`origin` AS `cartDetails.product.origin`, `cartDetails->product`.`productAt` AS `cartDetails.product.productAt`, `cartDetails->product`.`expireAt` AS `cartDetails.product.expireAt`, `cartDetails->product`.`manual` AS `cartDetails.product.manual`, `cartDetails->product`.`preserve` AS `cartDetails.product.preserve`, `cartDetails->product`.`productImage` AS `cartDetails.product.productImage`, `cartDetails->product`.`createdAt` AS `cartDetails.product.createdAt`, `cartDetails->product`.`updatedAt` AS `cartDetails.product.updatedAt`, `cartDetails->product`.`productCategoryId` AS `cartDetails.product.productCategoryId`, `cartDetails->product`.`quantityId` AS `cartDetails.product.quantityId` FROM (SELECT `carts`.`id`, `carts`.`createdAt`, `carts`.`updatedAt`, `carts`.`userId` FROM `carts` AS `carts` WHERE `carts`.`userId` = '2' AND ( SELECT `cartId` FROM `cartDetails` AS `cartDetails` WHERE ((`cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false) AND `cartDetails`.`cartId` = `carts`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `carts` INNER JOIN `cartDetails` AS `cartDetails` ON `carts`.`id` = `cartDetails`.`cartId` AND `cartDetails`.`isBuy` = false AND `cartDetails`.`isDeleted` = false LEFT OUTER JOIN `products` AS `cartDetails->product` ON `cartDetails`.`productId` = `cartDetails->product`.`id`;
[2021-12-15 12:08:03] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 12:08:03] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:08:03] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:08:03] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:08:05] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:08:05] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:08:05] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:08:05] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:08:05] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:08:05] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:03] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 12:11:03] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:03] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:03] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:05] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:05] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:05] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:05] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:05] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:05] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:06] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:06] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:06] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:06] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:06] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:06] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:11] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:11] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:11] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:13] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:13] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:13] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:21] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:21] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:21] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:22] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:22] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:22] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:24] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:24] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:24] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:25] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:25] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:25] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:26] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:26] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:26] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:27] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:27] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:27] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 12:11:29] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 12:11:29] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 12:11:29] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:07:40] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 13:07:40] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 13:07:40] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:07:40] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:07:42] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 13:07:42] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:07:42] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:07:42] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '2';
[2021-12-15 13:07:42] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:07:42] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:13:00] [[32minfo[39m] Server is running on port 8080
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 13:13:00] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 13:13:01] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 13:13:02] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `isCanceled` TINYINT, `isDone` TINYINT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 13:13:03] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 13:13:04] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 13:13:04] [[32minfo[39m] Dropped and Resync database
[2021-12-15 13:59:30] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 13:59:30] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 13:59:30] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:59:30] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:59:33] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 13:59:33] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:59:33] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 13:59:33] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 13:59:33] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 13:59:33] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:00:44] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 14:00:44] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:00:44] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:00:44] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:00:46] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:00:46] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:00:46] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:00:46] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:00:46] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:00:46] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:00:48] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:00:48] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:00:48] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:04:44] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'phuctg';
[2021-12-15 14:04:44] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:04:44] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:04:44] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:04:46] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:04:46] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:04:46] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:04:46] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:04:46] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:04:46] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 14:04:47] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`id` = '1';
[2021-12-15 14:04:47] [[32minfo[39m] Request status: [object Object] data [object SequelizeInstance:users]
[2021-12-15 14:04:47] [[31merror[39m] Request status: [object Object] error Error: ENOENT: no such file or directory, open 'D:\git\CNPMM\BEnull'
[2021-12-15 19:13:48] [[32minfo[39m] Server is running on port 8080
[2021-12-15 19:18:18] [[32minfo[39m] Server is running on port 8080
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 19:18:18] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `users`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255) UNIQUE, `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `firstname` VARCHAR(255), `lastname` VARCHAR(255), `gender` VARCHAR(255), `phone` VARCHAR(255), `birthday` DATE, `address` VARCHAR(255), `userAvatar` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `users`
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `roles`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `roles` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `roles`
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCategories`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCategories`
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foods`;
[2021-12-15 19:18:19] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foods` (`id` INTEGER NOT NULL auto_increment , `foodName` VARCHAR(255), `foodDescription` VARCHAR(255), `foodCalories` FLOAT, `foodImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodCategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foods`
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): ALTER TABLE `foods` ADD FULLTEXT INDEX `food_index` (`foodName`)
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `productCategories`;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `productCategories` (`id` INTEGER NOT NULL auto_increment , `catName` VARCHAR(255), `catIcon` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): SHOW INDEX FROM `productCategories`
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `quantities`;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `quantities` (`id` INTEGER NOT NULL auto_increment , `quantityName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): SHOW INDEX FROM `quantities`
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `products`;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `products` (`id` INTEGER NOT NULL auto_increment , `proName` VARCHAR(255), `proDescription` VARCHAR(255), `quantityValue` FLOAT, `price` FLOAT, `brand` VARCHAR(255), `origin` VARCHAR(255), `productAt` DATE, `expireAt` VARCHAR(255), `manual` VARCHAR(255), `preserve` VARCHAR(255), `productImage` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `productCategoryId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`productCategoryId`) REFERENCES `productCategories` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): SHOW INDEX FROM `products`
[2021-12-15 19:18:20] [[32minfo[39m] Executing (default): ALTER TABLE `products` ADD FULLTEXT INDEX `product_index` (`proName`)
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodMaterials`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodMaterials` (`id` INTEGER NOT NULL auto_increment , `foodMaterialName` VARCHAR(255), `quantityDescription` VARCHAR(255), `quantityValue` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, `productId` INTEGER, `quantityId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`quantityId`) REFERENCES `quantities` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodMaterials`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `foodCookSteps`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `foodCookSteps` (`id` INTEGER NOT NULL auto_increment , `stepNumber` INTEGER, `stepDescription` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `foodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`foodId`) REFERENCES `foods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `foodCookSteps`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `carts`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `carts` (`id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `carts`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `cartDetails`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `cartDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `isBuy` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `cartId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`cartId`) REFERENCES `carts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `cartDetails`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `deliveryMethods`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `deliveryMethods` (`id` INTEGER NOT NULL auto_increment , `deliveryMethod` VARCHAR(255), `fee` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `deliveryMethods`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `paymentMethods`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `paymentMethods` (`id` INTEGER NOT NULL auto_increment , `paymentType` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `paymentMethods`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orders`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orders` (`id` INTEGER NOT NULL auto_increment , `addressDelivery` VARCHAR(255), `deliveryAt` DATE, `isCanceled` TINYINT, `isDone` TINYINT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, `deliveryMethodId` INTEGER, `shipperId` INTEGER, `paymentMethodId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`deliveryMethodId`) REFERENCES `deliveryMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`shipperId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`paymentMethodId`) REFERENCES `paymentMethods` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orders`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `orderDetails`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `orderDetails` (`id` INTEGER NOT NULL auto_increment , `quantity` INTEGER, `price` FLOAT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `orderId` INTEGER, `productId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`orderId`) REFERENCES `orders` (`id`) ON DELETE SET NULL ON UPDATE CASCADE, FOREIGN KEY (`productId`) REFERENCES `products` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `orderDetails`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `favoriteFoodCategories`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `favoriteFoodCategories` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER , `foodCategoryId` INTEGER , PRIMARY KEY (`userId`, `foodCategoryId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`foodCategoryId`) REFERENCES `foodCategories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `favoriteFoodCategories`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-provinces`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-provinces` (`id` INTEGER NOT NULL auto_increment , `province` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-provinces`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-districts`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-districts` (`id` INTEGER NOT NULL auto_increment , `district` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressProvinceId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressProvinceId`) REFERENCES `address-provinces` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-districts`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `address-villages`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `address-villages` (`id` INTEGER NOT NULL auto_increment , `village` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `addressDistrictId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`addressDistrictId`) REFERENCES `address-districts` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `address-villages`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `marketNotes`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `marketNotes` (`id` INTEGER NOT NULL auto_increment , `marketNoteText` VARCHAR(255), `remindDate` DATE, `isDone` TINYINT(1), `isDeleted` TINYINT(1), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): SHOW INDEX FROM `marketNotes`
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): DROP TABLE IF EXISTS `user_roles`;
[2021-12-15 19:18:21] [[32minfo[39m] Executing (default): CREATE TABLE IF NOT EXISTS `user_roles` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `roleId` INTEGER , `userId` INTEGER , PRIMARY KEY (`roleId`, `userId`), FOREIGN KEY (`roleId`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
[2021-12-15 19:18:22] [[32minfo[39m] Executing (default): SHOW INDEX FROM `user_roles`
[2021-12-15 19:18:22] [[32minfo[39m] Dropped and Resync database
[2021-12-15 19:18:52] [[32minfo[39m] Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `roles` AS `roles` WHERE (`roles`.`name` = 'user');
[2021-12-15 19:18:52] [[32minfo[39m] User baotg is registered
[2021-12-15 19:18:57] [[32minfo[39m] Executing (default): SELECT `id`, `username`, `email`, `password`, `firstname`, `lastname`, `gender`, `phone`, `birthday`, `address`, `userAvatar`, `createdAt`, `updatedAt` FROM `users` AS `users` WHERE `users`.`username` = 'baotg';
[2021-12-15 19:19:08] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 19:19:09] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 19:19:10] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 19:19:11] [[32minfo[39m] Request status: [object Object] Success!
[2021-12-15 19:19:14] [[32minfo[39m] Executing (default): SELECT `orders`.`id`, `orders`.`addressDelivery`, `orders`.`deliveryAt`, `orders`.`isCanceled`, `orders`.`isDone`, `orders`.`createdAt`, `orders`.`updatedAt`, `orders`.`userId`, `orders`.`deliveryMethodId`, `orders`.`shipperId`, `orders`.`paymentMethodId`, `deliveryMethod`.`id` AS `deliveryMethod.id`, `deliveryMethod`.`deliveryMethod` AS `deliveryMethod.deliveryMethod`, `deliveryMethod`.`fee` AS `deliveryMethod.fee`, `paymentMethod`.`id` AS `paymentMethod.id`, `paymentMethod`.`paymentType` AS `paymentMethod.paymentType`, `orderDetails`.`id` AS `orderDetails.id`, `orderDetails`.`quantity` AS `orderDetails.quantity`, `orderDetails`.`price` AS `orderDetails.price`, `orderDetails->product`.`id` AS `orderDetails.product.id`, `orderDetails->product`.`proName` AS `orderDetails.product.proName`, `orderDetails->product`.`quantityValue` AS `orderDetails.product.quantityValue`, `orderDetails->product`.`quantityId` AS `orderDetails.product.quantityId` FROM `orders` AS `orders` LEFT OUTER JOIN `deliveryMethods` AS `deliveryMethod` ON `orders`.`deliveryMethodId` = `deliveryMethod`.`id` LEFT OUTER JOIN `paymentMethods` AS `paymentMethod` ON `orders`.`paymentMethodId` = `paymentMethod`.`id` LEFT OUTER JOIN `orderDetails` AS `orderDetails` ON `orders`.`id` = `orderDetails`.`orderId` LEFT OUTER JOIN `products` AS `orderDetails->product` ON `orderDetails`.`productId` = `orderDetails->product`.`id` WHERE `orders`.`userId` = '2';
[2021-12-15 19:19:14] [[31merror[39m] Request status: [object Object]  error TypeError: Cannot read properties of undefined (reading 'reverse')
